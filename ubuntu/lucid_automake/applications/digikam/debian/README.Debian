Debian kde-extras Team
----------------------

1. Contacts
-----------

General help requests
	<debian-kde@lists.debian.org>	mailing list
	#debian-kde			on irc

Packaging queries
	<debian-qt-kde@lists.debian.org>  mailing list
	#debian-qt-kde			  on irc

Maintainers
	<pkg-kde-extras@lists.alioth.debian.org>	mailing list


2. Subversion repository
------------------------
  
You can browse it only at:

http://svn.debian.org/wsvn/pkg-kde/kde-extras/

To "checkout" the repository use these commands:

	$ svn co svn+ssh://${ALIOTH_USERNAME}@svn.debian.org/svn/pkg-kde/kde-extras

Authorized SSH keys are controlled at https://alioth.debian.org/account/

The repository layout is:

- packagename/
    - trunk/
    - branches/
    - tags/
        - 0.7.2-1/
        - 0.7.2-2/
        - 0.7.2-2ubuntu1/
        - 0.7.2-2ubuntu2/
        - 0.7.2-2ubuntu3/
        - 0.8.0/
        ...

If only one version of the package is available at the time, development must 
be made at trunk/ dir, copying the dir to tags/'pkg-version' each time a new 
release is made.

When, at some point, the need to have two different versions at the same time 
arises (for example, if we need a version to be in unstable and a different one
to be in experimental), experimental development will be made in trunk/ and 
if a new unstable package needs to be cooked, copying 
tag/'latest_version_in_sid' to tag/'latest_version_in_sid'+1 will make the
trick.

3. Using svn-buildpackage
--------------------------

Packages with an upstream tarball will require you to set the mergeWithUpstream
property first (from the package root) so that svn-buildpackage will look for
the .orig.tar.gz in the ../tarballs directory.
	
	% svn propset mergeWithUpstream 1 debian

Please note that this only works for packages which have only the debian/
directory committed. Consequently, you must use CDBS's simple-patchsys.mk or
dpatch to modify the upstream sources.

After you have finished and committed your Debian patches via
	
	% svn commit [PACKAGE]

as well as copying the orig.tar.gz to ../tarballs/ if necessary, you may build
your package with the following commands:

	% svn-buildpackage --svn-ignore-new -rfakeroot

Please, don't commit tarballs/ or build-area/ directories to SVN.

4. Tarballs and Build-area directories
------------------------------------

During pkg development before uploaded to debian the tarballs can be found at:

	http://pkg-kde.alioth.debian.org/kde-extra/orig.tar.gz/

You need to place those dirs in the parent directory of the one from which you're 
running svn-buildpackage. Usually this means placing tarballs/ and build-area/ dirs 
in 'pkgname'/ dir, at the same level as trunk/

If you want to compile inside one version in tags/ dir, you'll need to place those
dirs inside that dir. Of course the easiest and cleanest way of doing it is 
by making a symlink of those dirs inside tags/ dir.

5. Using svn-inject
-------------------

To inject a new package into the Debian KDE Extras svn archive you should use svn-inject(1)
as follows:

        svn-inject -o <package>.dsc svn+ssh://${ALIOTH_USERNAME}@svn.debian.org/svn/pkg-kde/kde-extras

Type in your alioth password a few hundred times :-) and your package should be
uploaded to the archive.  Note you will also need to manually copy the
package.orig.tar.gz to your tarballs directory.  The -o option is important as
this ensures that we 'Only keep modified files under SVN control'

6. Versioning
-------------

As the autobuilder and fellow developers will need to differentiate between
versions that are uploaded into debian already and those which will be at a
later point, do use the UNRELEASED distribution until the time you actually do
upload to incoming. Whoever is not a DD himself should let the sponsor do that
final step if that sponsor has SVN commit rights to the kde-extras archive.

The autobuilder packs can be found at http://kde-extras.buildserver.net/.
The logs can be found at http://status.buildserver.net/.

As the archive runs britney, it may well be that a built and installed package
is not appearing to the archive until its reverse depends are (re)built too. In
case of questions, feel free to mail kilian@debian.org.

7. Automatic Backport hooks
---------------------------

The checkout script for putting together the sources can run a backports hook
for certain dists (like Debian sarge) which need certain adjustments to the
source like altered Build-Depends. This hook is a plain shell script (or
makefile like debian/rules) which needs to be put in the debian/backports
directory and made executable by means of the svn properties set. The codenames
for the current dists are: sid, etch, sarge, edgy and dapper. For an example
see asterisk-addons/trunk/debian/backports/sarge which may be more illustrating
what to do.

8. Autotools, libtool, am_maintainer, buildprep and configure updates
---------------------------------------------------------------------

Achim, Please add some text in here to document when it is necessary and
how we update the build enviroment for a package.

-(snip)-

In case any of the above is unclear to you or seems outdated, please drop us a
note to the maintainers list.
