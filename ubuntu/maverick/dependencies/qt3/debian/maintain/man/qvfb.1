.TH "qvfb" "1" "3.0.3" "Troll Tech AS, Norway." ""
.SH "NAME"
.LP 
qvfb \- Virtual framebuffer for Qt
.SH "DESCRIPTION"
.LP 
The virtual framebuffer allows Qt/Embedded programs to be
developed on your desktop machine, without switching
between consoles and X11. 

Start a Qt/Embedded master application (i.e., construct
QApplication with QApplication::GuiServer flag or use the
\-qws command line parameter). You will need to specify to
the server that you wish to use the virtual framebuffer
driver, e.g.: 

    widgets \-qws \-display QVFb:0
    
You may prefer to set the QWS_DISPLAY environment
variable to be QVFb:0. 

qvfb supports the following command line options: 

 \-width width: the width of the virtual framebuffer
  (default: 240). 
 \-height height: the height of the virtual framebuffer
  (default: 320). 
 \-depth depth: the depth of the virtual framebuffer (1, 8
  or 32; default: 8). 
 \-nocursor: do not display the X11 cursor in the
  framebuffer window. 
 \-qwsdisplay :id the Qt/Embedded display id to provide
  (default: 0). 

 Virtual Framebuffer Design 

The virtual framebuffer emulates a framebuffer using a
shared memory region (the virtual frame buffer) and a
utility to display the framebuffer in a window (qvfb).
The regions of the display that have changed are updated
periodically, so you will see discrete snapshots of the
framebuffer rather than each individual drawing
operation. For this reason drawing problems such as
flickering may not be apparent until the program is run
using a real framebuffer. 

The target refresh rate can be set via the "View|Refresh
Rate" menu item. This will cause qvfb to check for
updated regions more quickly. The rate is a target only.
If little drawing is being done, the framebuffer will not
show any updates between drawing events. If an
application is displaying an animation the updates will
be frequent, and the application and qvfb will compete
for processor time. 

Mouse and keyboard events are passed to the Qt/Embedded
master process via named pipes. 

The virtual framebuffer is a development tool only. No
security issues have been considered in the virtual
framebuffer design. It should be avoided in a production
environment; QT_NO_QWS_VFB should always be defined in
production libraries. 
.SH "AUTHORS"
.LP 
TrollTech <http://www.trolltech.com/>
